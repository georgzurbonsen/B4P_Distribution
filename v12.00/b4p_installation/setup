#!./b4p -I

// B4P Installation Script for UNIX/LINUX systems

version[] 			= "12.00 2025-06-01 (Linux & MacOS)";
runtime settings[verbose]	= quiet;

// Revision History
//
// 1.00		11.01.2020	Created for Beyond4P 6.02 and 7.00 under LINUX
// 1.01		14.02.2020	Suports LINUX and MACOS
// 1.02		10.08.2020	Adaptation to B4P 8.00 / Rebranding
// 1.03		12.11.2020	Included the My B4P Init.b4p file
// 1.04		21.02.2021	Include style theme sheet installation
// 1.10		08.03.2021	Batch mode installation supported
// 1.11		14.03.2021	Outputs version info
// 11.00	20.10.2024	Adapted for Relase 11.00



define procedure and function( get long options, {{ valid option names, to set members to string}}, 0, 1 )
{
    if (existing( long options[] )) if (identify( long options[] )=='array') delete members( long options[] ); // Delete members if array
    local
    {
	count[]= 0;
	arg[]= '';
    }	   
    for all variables( command line arguments[], arg[] )
    {
	if (arg[] = '--*')
	{
	    arg[] -= '--';
	    if (parameter count[] >= 1) if ( find( valid option names[], left( arg[], "=") ) < 0 )
	    {
	        throw( compose("Function 'get long options': long option '--", arg[], "' in the command line is not valid."));
	    }
	    count[]++;
	    global() long options[left( arg[], '=' )] = select if( (arg[] = '*=*'), best type(right( arg[], "=" )), null() );
	}
    }
    return( count[] );
}

{
	echo(new line, "B4P installation program ", version[], " is starting ... ");

	if (system info[operating system] <> Linux, MACOS)
	{
		throw( "Attempting to install B4P under "+ system info[operating system] + new line +
		       "    This installation packgage is for LINUX and MACOS systems only." );
	}


	slash[] 			= system info[directory separator]; // '\' for Windows, '/' for UNIX environments
	dir[installation image] 	= working directory() + slash[];
	principal b4p folder name[] 	= "b4p";

	user settings file[]		= "B4P User Settings.json";
	locale settings file[]		= "B4P Locale Settings.json";
	identification file[]		= "B4P Identification File.json";

	table initialize( menu,
	{ 	{ Choices,	Explanations, 						Selections 	},
		{ I,		'Install B4P on your machine',       			I 		},
		{ U,		'Un-install B4P', 					U 		},
		{ E,		'Exit installer without actions',			E 		}  
	} );

	get long options( { help, choice, 'keep-user-settings', 'keep-my-init', 'keep-my-themes', locale, 'create-personal-folder' } );




	//
	// Assistance
	//

	if (existing( long options[help] ))
	{
	    echo("Syntax: setup");
	    echo("        setup [long options]");
	    echo;
	    echo("        All long options begin with two consecutive minus signs.");
	    echo("        The options may be arranged in any order.  Where applicable,");
	    echo("        add option value after '=' without spaces around them.");
	    echo("        Option values like file names may be put into quotation marks.");
	    echo;
	    echo("        --help                   Shows this help. No installation started");
	    echo;
	    echo("        --choice=machine         Do machine installation for all users");
	    echo("                 deinstall       Do de-installation");
	    echo("                 exit            No actions.");
	    echo("        Note: Using '--choice' will run installation in batch mode entirely");
	    echo("        Note: Must also provide locale info at the first installation");
	    echo;
	    echo("        --keep-user-settings     Keep user settings from previous installation");
	    echo("        --keep-my-init           Keep own 'My B4P Init.b4p' file");
	    echo("        --keep-my-themes         Keep own 'B4P Style Themes.xlsx' file");
	    echo("        --create-personal-folder Create personal folder for B4P programs");
	    echo;
	    echo("        --locale=keep            Keep existing locale settings");
	    echo("                 xx_YY           Language/Country designation, e.g. 'en_US'");
	    echo("          Specified locales are not case sensitive, hypen or underscore OK");
	    echo("          Use locale info as use with Excel to match number and date formats");
	    echo("          as well as list separators (commas or semicoons).");
	    echo;
	    echo;
	    echo("Example:   setup --choice=machine --locale=en_US");
	    echo;
	    echo("Note:   Elevated user privileges are requierd (add 'sudo' before command)");
	    echo;
	    exit;
	}


	//
	// Check privileges
	//

	echo(new line, "1 >> Check the B4P privileges to run installation program ...", new line);

	if (system info[privileges] <> elevated,administrator) 
		throw( "Insufficient privileges." + new line + "    Type 'sudo ./setup' to install B4P on your system." );




	//
	// Installation Option, either using main menu or batch
	//

	echo(new line, "2 >> Installation program - Main Menu ...", new line);

	if (existing and valid(long options[choice]))
	{
	    batch[] = true;
	    runtime settings[exit directly] = true;
	    available choices[] = { machine, deinstall, exit }; // Note: 'user' choice applies for windows only.
	    if ( find( available choices[], long options[choice]) < 0 )
	    {
		throw( compose( "Encountered invalid value assigned to long option '--choice': ", long options[choice], new line, "    Valid choices are: ", join(available choices[],", "), "." ) );
	    }
	    echo("    Recognized command line long option: --choice=", long options[choice] );
	    choice[] = +long options[choice]{0}; // M for machine, and D for de-install (1st character moved to upper case
	}
	else
	{
	    batch[] = false;
	    choice[] = table menu quick( menu, Choices, Explanations, Selections );
	}

	if (choice[] = E) throw(exit);

	if ( (choice[] = U) & !batch[] )
	{
	    reply[] = input quick ignore case(new line + "    A t t e n t i o n" + new line + "    Are you sure you want to de-install B4P? ", NY );
	    if (reply[]<>Y) throw(exit);
	}


	//
	// Check if all files needed for installation are available
	//


	if (choice[] <> U)
	{
		echo(new line, "3 >> Check that all required files are available for installation ...", new line );

		required files 2 [Program]		= "b4p";
		required files 2 [Manual]		= "B4P Reference Manual.b4p";
		required files 2 [Install Script]	= "setup";
		required files 1 [Locales List]		= "List of Locales.csv";
		required files 1 [Style Themes]		= "B4P Style Themes.xlsx";

		required direct 1[lib]			= "lib";
		required direct 1[weblib]		= "weblib";

		for all variables( required direct 1[], direct[] )	// To copy to /usr/local/etc
		{
		    echo("    Check ", direct[] );
		    if (!directory existing ( dir[installation image] + direct[])) throw( "Following required file is missing: " + direct[] );
		}

		for all variables( required files 1[], file[] )	// To copy to /usr/local/etc
		{
		    echo("    Check ", file[] );
		    if (!file existing ( dir[installation image] + file[])) throw( "Following required file is missing: " + file[] );
		}
		for all variables( required files 2[], file[] )	
		{
		    echo("    Check ", file[] );
		    if (!file existing ( dir[installation image] + file[])) throw( "Following required file is missing: " + file[] );
		}
	}



	//
	// Identify location of program files and check if folder is existing
	//

	echo(new line, "4 >> Identify locations for the program files ...", new line);

	dir[bin] 				= system info [ bin directory ];
	dir[program files b4p]			= system info [ program directory b4p ];
	dir[user application data]		= system info [ user app data directory b4p ];

	echo("Identified following directories:", new line);
	echo("    For executable program:                     ", dir[bin]);
	echo("    For program related files (e.g. libraries): ", dir[program files b4p]);
	echo("    For user application data:                  ", dir[user application data]);

	//
	// Check for existing user, and locale settings.
	//

	echo(new line, "5 >> Check for exisintg user, local and themes setting ...", new line);

	if (choice[] <> U) // All choices except uninstallation
	{
	    user settings file name[]   	= dir[user application data] + slash[] + user settings file[];
	    user settings existing[] 		= file existing( user settings file name[]   );

	    b4p style themes file name[]	= system info[user app data directory b4p] + slash[] + "B4P Style Themes.xlsx";
	    b4p style themes file existing[]	= file existing( b4p style themes file name[] );

	    my b4p init file name[]		= system info[user app data directory b4p] + slash[] + "My B4P Init.b4p";
	    my b4p init file existing[]	= file existing( my b4p init file name[] );


	    locale settings file name[] 	= dir[user application data] + slash[] + locale settings file[];
	    locale settings existing[] 	= file existing( locale settings file name[] );

	    echo(new line, "    Found following settings files:", new line);
	    echo("    User   settings :  ", select if ( user settings existing[]        , "Yes: " + user   settings file name[],  "No." ));
	    echo("    Locale settings :  ", select if ( locale settings existing[]      , "Yes: " + locale settings file name[],  "No." ));
	    echo("    My B4P init file:  ", select if ( my b4p init file existing[]     , "Yes: " + my b4p init file name[]    ,  "No." ));
	    echo("    B4P Style Themes:  ", select if ( b4p style themes file existing[], "Yes: " + b4p style themes file name[], "No." ));

	    if (user settings existing[])
	    {
		echo(new line, "    The existing user settings file contains starting directory name,");
		echo(          "    user defined prompt, and other user specific data.", new line);

		reply[]= select if( batch[], N, '');
		if (existing(long options['keep-user-settings'])) reply[] = Y;

		if (reply[]='')
		{
		    reply[] = input quick ignore case("    Do you want to keep the user settings file from the previous installation ?", NY);
		}
		if (reply[]=N) 
		{
		    echo("    Using new user settings.");
		    file delete( user settings file name[] );
		    user settings existing[] = false;
		}
		else
		{
		    echo("    Keeping existing user settings.");
		}
	    }


	    if (locale settings existing[])
	    {
		echo(new line, "    The locale settings file contains language and country specific" );
		echo(          "    number and date formats.", new line);

		reply[] = pick if existing and valid(long options[locale], '' );
		if (batch[])
		{
		    if (reply[]='') reply[] = keep;
		}

		if (reply[]='')
		{
		    reply[] = input quick ignore case("    Do you want to keep these locale settings  ?", "NY");
		}
		else
		{
		    if (reply[]=keep) // --locale=keep
		    {
			reply[] = Y;		
		    }
		    else
		    {
			reply[] = N;
		    }
		}

		if (reply[]=N) 
		{
		    echo("    Using new locale settings.");
		    file delete( locale settings file name[] );
		    locale settings existing[] = false;
		}
	    }


	    if (my b4p init file existing[])
	    {
		echo(new line, "    The file 'My B4P Init File.b4p' contains your personalized B4P,");
		echo(          "    initialization program.", new line);

		reply[]= select if( batch[], N, '');
		if (existing(long options['keep-my-init'])) reply[] = Y;

		if (reply[]='')
		{
		    reply[] = input quick ignore case("    Do you want to keep the this file from the previous installation ?", NY);
		}
		if (reply[]=N) 
		{
		    echo("    Using new 'My B4P Init File.b4p'.");
		    file delete( my b4p init file name[] );
		    my b4p init file existing[] = false;
		}
		else
		{
		    echo("    Keeping existing 'My B4P Init File.b4p' for the new installation.");
		}
	    }


	    if (b4p style themes file existing[])
	    {
		echo(new line, "    The file 'My Style Themes.xlsx' (Excel file) contains all themes which,");
		echo(          "    can be used with the function 'table style themes(...)' to format tables.", new line);

		reply[]= select if( batch[], N, '');
		if (existing(long options['keep-my-themes'])) reply[] = Y;

		if (reply[]='')
		{
		    reply[] = input quick ignore case("    Do you want to keep this file (No: A new theme file will be introduced) ?", "NY");
		}
		if (reply[]=N) 
		{
		    echo("    Using new style themes.");
		    file delete( b4p style themes file name[] );
		    b4p style themes file name[] = false;
		}
		else
		{
		    echo("    Keeping existing themes file for the new installation.");
		}
	    }


	    if (directory existing( dir[user application data] ))
	    {
		file copy multiple overwrite all(  dir[user application data], ".", "*.json" );  // Copy all settings file to local installation directory
		file copy multiple overwrite all(  dir[user application data], ".", "My B4P Init.b4p" ); // and rescue the personalized "My B4P Init.b4p" file.
		file copy multiple overwrite all(  dir[user application data], ".", "B4P Style Themes.xlsx" ); // and rescue the personalized B4P file
	    }


	    echo(new line, "6 >> Deleting B4P program and application data subdirectories (if existing) ...", new line);

	    for all( { dir[program files b4p], dir[user application data] }, dir[] )
	    {
		if (directory existing( dir[] ))
		{
			directory delete recursive( dir[] );
			echo("    Deleted ", dir[] );
		}
	    }

	    file delete silently( dir[bin] + slash[] + "b4p" ); // Delete the executable file
	    echo("    Done.");
	}



	//
	// Identify paths to desktop and start menus
	//



	if (choice[] = U)
	{
		echo(new line, "De-Installation completed.", new line);
		throw(exit);
	}

	//
	// Create the new folder incl. libraries folder
	//

	echo(new line, "7 >> Create new folders for B4P program ...", new line);


	// create /etc/b4p and /etc/b4p/lib

	dir[Lib] = dir[program files b4p] + slash[] + "lib";
	rv[] = directory create silently( dir[Lib] );
	if (rv[] != "OK")
	{
	    throw("Attempting to create directory '" + dir[program files b4p] + "': " + rv[]);
	}
	echo("    Created ", dir[Lib], "." );


	// create /home/username/.config/b4p
	rv[] = directory create silently( dir[user application data] );
	if (rv[] != "OK")
	{
	    throw("Attempting to create directory '" + dir[user application data] + "': " + rv[]);
	}
	echo("    Created ", dir[user application data], "." );


	//
	// Copy the contents (Program, libraries, etc.) 
	//

	echo(new line, "8 >> Copy all files to destination directory '", dir[program files b4p] , " ...", new line);

	for all variables( required files 1[], file[] )
	{
		echo("    Copying file ", file[], " ...");
		file copy(  dir[installation image] + file[], dir[program files b4p]  + slash[] + file[] );
		system( "chmod 755 " + quote path(dir[program files b4p]  + slash[] + file[]) ); // Enable access rights

	}

	for all variables( required direct 1[], direct[] )
	{
		echo("    Copying directory ", direct[], " ...");
		file copy recursive(  dir[installation image] + direct[], dir[program files b4p]  + slash[] + direct[] );
		system( "chmod 755 -R " + quote path(dir[program files b4p]  + slash[] + file[]) ); // Enable access rights
	}


	echo("   Copying ", required files 2[Program], " to ", dir[bin], " ...");
	file copy( dir[installation image] + slash[] + required files 2[Program], dir[bin] + slash[] + required files 2[Program] );
	system( "chmod 755 " + quote path(dir[bin] + slash[] + required files 2[Program]) ); // Enable access rights
//	system( "chown -R "  + system info[user name] + " " + quote path(dir[bin] + slash[] + required files 2[Program]) );

	//
	// Restore user settings and locale settings
	//

	echo(new line, "9 >> Restore user settings (where available) ..." , new line);

	if ( file existing( user settings file[] )  )
	{
	    echo("    Found: ", user settings file[] );

	    file copy multiple overwrite all(  ".", dir[user application data], user settings file[] ); 
	    file delete ( user settings file[] );
	}
	else
	{
	    echo("    Info: User settings file not found. Skipped copying", new line);
	}


	file copy multiple overwrite all(  ".", dir[user application data], "My B4P Init.b4p" ); 
	file copy multiple overwrite all(  ".", dir[user application data], "B4P Style Themes.xlsx" ); 




	echo(new line, "10 >> Define locale settings ..." , new line);

	table load( loc, "List of Locales.csv" );
	table keep columns( loc, {Locale, Language, Country } );
	table delete blank rows( loc );
	table insert columns( loc, Choice, "", 0);

	locale provided as option[] = select if existing and valid( long options[locale], '' );

	if (locale provided as option[] <> '',keep)
	{
	    substitute all( locale provided as option[], '-', '_' ); // Use underscore
	    locale[] = '';
	    table process selected rows( loc, (locale provided as option[] =+ [Locale]), locale[] = [Locale] );
	    if (locale[] == '') throw( "Locale info '" + long options[locale] + "' provided with '--locale' is not supported.");
	    echo("    Locale chosen: ", locale[], " / ", [loc:Locale,locale[],Language]," in ",[loc:Locale,locale[],Country],"." );
	    set locale( locale[], "List of Locales.csv" );
	    echo("    Done setting locale.");
	}
	else
	{
	    if ( file existing( locale settings file[] )  )
	    {
		echo("    Found: ", locale settings file[] );
		rv[] = directory create silently( dir[user application data] );
		if (rv[] <> 'OK','Directory already existing') throw("Installation aborted due to following error: " + rv[]);

		file copy multiple overwrite all(  ".", dir[user application data], locale settings file[] ); 
	        file delete ( locale settings file[] );
	    }
	    else
	    {

		echo("    No locale settings have been defined yet.");

		table copy table( loc, loc1 );
		table consolidate( loc1, Language );
		table process( loc1, [Choice] = chr( row()+64 ) );
		echo(new line,"    Step 1 - Choose language:");
		lang[] = table menu quick( loc1, Choice, Language, Language );

		table copy table( loc, loc1 );
		table keep selected rows( loc1, [Language]=lang[] );
		table process( loc1, [Choice] = chr( row()+64 ) );
		echo(new line,"    Step 2 - Choose country:");
		locale[] = table menu quick( loc1, Choice, Country, Locale );

	    	echo("    Locale chosen: ", locale[], " ( ", [loc:Locale,locale[],Language]," / ",[loc:Locale,locale[],Country],"." );

		set locale( locale[], "List of Locales.csv" );
		echo("    Done setting locale.");
	    }
	}



	system( "chown -R " + system info[user name] + " " + quote path(dir[user application data]) );

	//
	// Add B4P on the desktop - Skipped
	//


	//
	// Add Bd4P in the start menu - Skipped
	//


	system( "chown -R " + system info[user name] + " " + quote path(dir[user application data]) );
	my program directory[] = system info[user directory] + slash[] + principal b4p folder name[];

	// Final step: Make sure the own files are really owned by user and not the root

	echo(new line, "11 >> Opion: Creating a personal folder ..." , new line);

	reply[]= select if( batch[], N, '');
	if (existing(long options['create-personal-folder'])) reply[] = Y;

	if (reply[]='')
	{
	    reply[] = input quick ignore case(new line + "    Do you want to create a personal B4P program folder ? ", NY );
	}
	if (reply[] = Y)
	{
	    echo("    Creating directory: ", my program directory[] );
	    echo("    If directory or files already exist, then existing files");
	    echo("    will not be overwritten." );

	    rv[] 			= directory create silently( my program directory[] );
	    if (rv[] <> 'OK','Directory already existing') throw("Unable to create this directory: " + rv[]);
	    file copy multiple all	( ".", my program directory[], {main.b4p, hello world.b4p, start B4P here.b4p, interactive.b4p, Tetris.b4p} );
	    file copy overwrite		( required files 2[Manual], my program directory[] + slash[] + required files 2[Manual] );
	    starting directory		( my program directory[] );

	    // Make sure all files are owend by user and nto the root.

	    system( "chmod -R 755 "                                + quote path(my program directory[]      + slash[]) );
	    system( "chown -R "     + system info[user name] + " " + quote path(dir[user application data]) );
	    system( "chown -R "     + system info[user name] + " " + quote path(my program directory[]) );

	    echo(new line, "    Done creating this directory.");
	    echo(          "    When you start B4P without file specified, 'Main.b4p' in this directory will be started.");
	}
	else: echo("    A new personal folder will not be created.");


	echo;
	echo(new line,  ">>  Congratulations! Installation has completed.");
	echo(new line,  "    Highly advisable to restart your machine so all configuration settings for this installation are in effect.", new line, new line );


	catch( msg[] )
	{
	    if (msg[]<>exit)
	    {
		echo(new line, "*** An error occurred during the installation process ***", new line);
		echo("    Message: ", msg[] );
		echo("    For help, add the option '--help' to the command to start the installation");
		echo("    Installation procedure will be stopped", new line, new line);
	    }
	    else
	    {
	        echo("Exit - Installation program is exiting.");
	    }
	}

	sleep(2);
}

