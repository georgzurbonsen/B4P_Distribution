#!/usr/local/bin/b4p -x


// Challenge: Code the TETRIS game in B4P with less than 100 statements

sizes[width]	= 16;
sizes[height]	= 20;
sizes[walls]	= 1;
bricks[count]	= 5; // 5 different bricks
bricks[heights]	= { 4, 3, 3, 3, 2 };

table initialize ( bricks,
	{ {	A1,A2,A3,	B1,B2,B3,	C1,C2,C3, 	D1,D2,D3,	E1,E2	},
	  {	'',1 ,'',	'',1 ,'',	'',1 ,'',	'',1 ,'',	1 ,1 	},
	  {	'',1 ,'',	'',1 ,1 ,	'',1 ,'',	'',1 ,1 ,	1 ,1 	},
	  {	'',1 ,'',	'','',1 ,	'',1 ,1 ,	'',1 ,'' 		},
	  {	'',1 ,''								} } );


table initialize ( original box,
	{ {	H1 .. 'H'+str(2 * sizes[walls] + sizes[width])			},	// Headers
		sizes[height]:	{ sizes[walls]:-1, sizes[width]:'', sizes[walls]:-1  }, // Walls
		{ (sizes[walls]*2+sizes[width]):-1 } } ); 				// Floor


palette[] =
	{ light red,	light mandarin,	light orange,	light yellow,	light granny,	light green,
	  light sky blue,light ocean,	light lapis,	light blue,	light violet,	light magenta };


define function( pick a brick )
{
    local
    {
	c[] = random( bricks[count]-1 );
	a[] = soft( chr( c[] + 65 ) + '*' ); // A, B, ...
	m[] = [bricks: :a[], 1..bricks[heights]{c[]} ];
	for (i[] = 0, i[] < random(3), i[]++) m[] = rotate left(m[]);
	if (random(1)==1) m[] = flip horizontally(m[]);
	return(m[]);
    }
}


define procedure( draw cube )
{
	if ([.] < 0 ) background color( light gray ); // Walls
	if ([.] > 0 ) background color( palette[]{ mod([.], palette[]{} )});
	print('  ');
	background color(black);
}


define procedure( display box, { {box name, string}, { y1, numeral }, { y2, numeral }} )
{
    local
    {
	cursor[y offs] = 1;
	cursor[x offs] = 2;
	y2[] = min( y2[], table length(box name[])-1 );
	for (y[] = y1[], y[] <= y2[], y[]++)
	{
	    cursor( cursor[x offs], cursor[y offs]+y[] );
	    table process columns( box name[], y[], draw cube; );
	}
    }
}


// Main Program, enjoy playing

game over[] = false;
score[] = 0;
cursor(hide);
table copy table( original box, box );	// New empty box
cls;
cursor(2*(sizes[width]+sizes[walls]*2)+4,2); print("TETRIS on B4P. Written by Georg zur Bonsen");
cursor(1,sizes[height]+4); 
print("Activate 'Num Lock'. Keys: 4: left, 6: right, 8: rotate left, 5: rotate right, 2: push down.");
i[] = 1;
patience[] = 50;
until (game over[])
{
    cursor(2*(sizes[width]+sizes[walls]*2)+4,4); print("Score: ", score[], "   ");
    y[] = 1;
    display box(box, 1,sizes[height]+1);
    brick[] = pick a brick();
    brick[] = replace if( brick[], i[], 1 );
    x[] = random( sizes[width]-2-brick[]{} )+sizes[walls]+1;

	    drop over[] = false;
    timer[] = 0;
    until (drop over[] | game over[])
    {
	table copy table( box, box in play );

        success[] = table write cells( box in play, y[], x[], brick[], refuse overwriting );
        display box(box in play, y[]-1,y[]+brick[]{});
	if (success[]==0)
	{
	    game over[] = true;
	    break;
	}

	do
	{
	    timer[]++;
	    choice[] = wait( 0.01 ); // 2 is temporary move-down.  Will be automated later
	    if (choice[]=='2') timer[] = 0;
	    if (timer[] > patience[])
	    {
		choice[] = '2';
		timer[] = 0;
	    }
	}
	while (choice[] == '');

	x[prev] = x[];
	brick[in play] = brick[];
	switch( choice[] )
	{
	    case ('4') if (x[] > 0) x[]--;
	    case ('6') if (x[] < (sizes[width]+sizes[walls])) x[]++;
	    case ('2') y[]++;
	    case ('8') brick[in play] = rotate left(brick[in play]);
	    case ('5') brick[in play] = rotate right(brick[in play]);
	}
		
	table copy table( box, box in play );
        success[] = table write cells( box in play, y[], x[], brick[in play], refuse overwriting );

	if (success[]==0 & choice[]=='2')
	{
	    drop over[] = true;
            success[] = table write cells( box in play, y[]-1, x[], brick[in play], refuse overwriting );
	}

	if (success[]==0)
	{
	    x[] = x[prev];
	}
	else
	{
	    brick[] = brick[in play];
	}
        display box(box in play, y[]-1,y[]+brick[]{});
	if (choice[]==escape) interactive;		
    }
    table copy table		( box in play, box );
    rows deleted[] 		= table delete selected rows( box, find([..],'')<0 & row()<(table length(box)-1) );
    table insert rows( box, 1, rows deleted[] );
    for (y[]=1, y[]<=rows deleted[], y[]++) [box:..,y[]] = [original box:..,1];
    score[] += rows deleted[];
    if (patience[]>5) patience[]--;
    i[]++;
}	
cursor(1,sizes[height]+5); 
echo("Game over.");
cursor(show);

