

/*
	Zip Library.b4p
	____________________________________________________________________________________________________________


	Provides a set of functions to zip / unzip files with 7z.exe (must be installed separately) !!!

	____________________________________________________________________________________________________________


	Version 2.01		Runs on Beyond4P Release 6.02 + (Windows and Linux and MACOS)

	Author:			Georg zur Bonsen
				Copyright (C) 2020 by Georg zur Bonsen, All Rights Reserved

	Contents:

	This library contains a set of ZIP compression and extraction functions which can be conveniently used
	in Beyond4P.  Note that the 7Z compression tool must be installed and located in one of the available "C:\Prog..." 
	subdirectories.  Execution will stop if 7Z cannot be found.


	Revision History:
	____________________________________________________________________________________________________________

	Library	Beyond4P	Date		Features

	1.00	5.07				First Release with basic functions
	1.01	5.07		03.04.2019	If ZIP file is locked user can retry
	1.02	6.01		10.09.2019	Resolved some problems with file and directory names containing spaces
	2.00	6.02, 7.00	10.01.2020	Supports both LINUX and WINDOWS
	2.01	6.02, 7.01	19.02.2020	Also OK for MACOS

*/


once
{

	//
	// Version verification
	// _________________________________________________________________________________________________________
	//

	global() version info zip include[] = "2.00";

	echo(new line + "Included 'Zip Library.b4p' Release ", version info zip include[] );
	echo("Copyright (C) 2012..2019 Georg zur Bonsen, all rights reserved." + new line);

	echo("Running on: ", system info[operating system], " (", system info[operating system product], ")", new line );


	if (numeral( left( version info[], ' ')) < 6.02)
	{
	    echo("Version Mismatch. Prerequisite for using this file 'Style Library.txt' is Beyond4P Release 6.01 or newer.");
	    echo("Please obtain and install latest available release.");
	    stop;
	}


	//
	// Search the 7Z (Windows) or ZIP (Linux) compression / decompression utility (or retrieve it if already stored)
	// _________________________________________________________________________________________________________
	//


	if (system info[operating system] = Windows)
	{

	        global { _zip path[] = "";  }
		attribute read( system info[user app data directory beyond4p], "Beyond4P User Settings.json", "7-Zip Path", _zip path[] );

		if ((_zip path[]="") | (!file existing(_zip path[]))) // 7-Zip file not found with path stored in user settings
		{

		    echo(new line, "Look for the 7Z compression/decomopression utility", new line);

		    program paths[] = search files( "C:\", "Prog*", -1, directories );

		    echo("Found following program file paths: ", program paths[] );

		    for all parameters( program paths[], program path[] )
		    {
			_zip path[] = search files recursive( program path[], "7z.exe" );
			if (_zip path[] <> "") break loop;
		    }

		    if (_zip path[] = "")
		    {
			exception( stop, "Unable to find 7z.exe.  You need to install this utility", -1 );
		    }

		    attribute write( system info[user app data directory beyond4p], "Beyond4P User Settings.json", "7-Zip Path", _zip path[] );
		    echo(new line, "A 7z.exe has been found.  It is located in ", _zip path[] );

		    delete( program paths[], program path[] );
		}
		else
		{
		    echo(new line, "Path to 7z.exe already memorized (OK): ", _zip path[] );
		}
	
		_zip program[] = 7z; // Indicates that 7z shall be used.

	}
	else: if (system info[operating system] = Linux,MACOS)
	{
	        global { _zip path[] = ""; _unzip path[] = ""; }
		attribute read( system info[user app data directory beyond4p], "Beyond4P User Settings.json", "Zip Path", _zip path[] );

		if ((_zip path[]="") | (!file existing(_zip path[]))) // 7-Zip file not found with path stored in user settings
		{

		    echo(new line, "Look for the Zip compression/decomopression utility", new line);

		    program paths[] = search files( "/bin", "zip", -1, files );
		    if (program paths[] = {}) // Nothing found yet
		    {
			program paths[] = search files( "/usr/bin", "zip", -1, files );
		    }

		    echo("Found following program file paths: ", program paths[] );

		    if (program paths[] <> {} ) // Something found
		    {
			_zip path[] = program paths[]{0};
		    }
		    else
		    {
			exception( stop, "Unable to find zip program.  You need to install this utility", -1 );
		    }

		    attribute write( system info[user app data directory beyond4p], "Beyond4P User Settings.json", "Zip Path", _zip path[] );
		    echo(new line, "A zip program has been found.  It is located in ", _zip path[] );

		    delete( program paths[] );
		}
		else
		{
		    echo(new line, "Path to zip program already memorized (OK): ", _zip path[] );
		}
		_unzip path[] = replace( _zip path[], zip, unzip );
	

	}
	else
	{	
		exception( stop, "Unsupported operating system: " + system info[operating system] + new line + "Supported OS are: Windows, Linux." , -1 );
	}


	//
	// Function library
	// _________________________________________________________________________________________________________
	//

	define procedure( zip check file, {{ archive file name, literal }} )
	{
		if (!file existing( archive file name[]))
		    exception( stop, compose("1st parameter: archive file name = '", archive file name[], "': File not found"), 2 );

		if (!read accessible repeat if locked( archive file name[]))
		    exception( stop, compose("1st parameter: archive file name = '", archive file name[], "': No read access rights"), 2 );

	}



	define procedure ( zip extract files, {{ archive file name, literal }, { content file names, to parameters members to literal}, { target directory name, literal }}, 2, 3 )
	{
		substitute all			( archive file name[], "/", system info[directory separator] );
		substitute all			( archive file name[], "\", system info[directory separator] );
		zip check file			( archive file name[] );		

		final file names[] 		= {};
		quoted content file names[] 	= {};
		for all parameters( content file names[], content file name[] )
		{
		    substitute all		( content file name[], "/", system info[directory separator] );
		    substitute all		( content file name[], "\", system info[directory separator] );

		    final file name[] 		= right last match( right last match( content file name[], "\" ), "/" ); // Remove all path names before.
		    final file names[] 		+= {final file name[]};
		    quoted content file names[]	+= {quote path(content file name[])};
		}

		if (parameter count[]<3)
		{
			target directory name[] = "." + system info[directory separator]; // Current directory if not specified.
		}
		else
		{
			substitute all		( target directory name[], "/", system info[directory separator] );
			substitute all		( target directory name[], "\", system info[directory separator] );

			if (file existing( target directory name[]))
			    exception( stop, compose("3rd parameter: target directory name = '", target directory name[], "': already exists as a file"), 1 );

			if (target directory name[] = "") target directory name[] = "." + system info[directory separator];
			if (target directory name[]{-1} <> system info[directory separator]) target directory name[] += system info[directory separator];
		}

		if (system info[operating system] = Windows)
		{
			command[] 	= quote path(_zip path[]) + ' -y e ' + quote path(archive file name[]) + ' ' + join(quoted content file names[]," ") +
				  ' -o' + quote path(target directory name[]) + ' > NUL';
		}
		else // Linux, MACOS
		{
			command[] 	= _unzip path[]      + ' -qq -o -j ' + quote path(archive file name[])   + ' ' + join(quoted content file names[]," ") +
				  ' -d ' + quote path(target directory name[]);
		}

		rv[] = system(command[]);

		if (rv[] <> 0)
		{
			exception( stop, "unzip command failed: " + command[] + new line + "Check all file names.", 1 );
		}

	}


	define procedure ( zip extract all, {{ archive file name, literal }, { target directory name, literal }}, 1, 2 )
	{
		substitute all			( archive file name[], "/", system info[directory separator] );
		substitute all			( archive file name[], "\", system info[directory separator] );
		zip check file			( archive file name[] );		

		if (parameter count[]>=2)
		{
			substitute all		( target directory name[], "/", system info[directory separator] );
			substitute all		( target directory name[], "\", system info[directory separator] );

			if (file existing( target directory name[]))
			    exception( stop, compose("2nd parameter: target directory name = '", target directory name[], "': already exists as a file"), 1 );

			if (target directory name[] = "") target directory name[] = "." + system info[directory separator];
			if (target directory name[]{-1} <> system info[directory separator]) target directory name[] += system info[directory separator];


		}
		else // Target directory name gets same name as archive file name
		{
			target directory name[] = right( left last match( archive file name[], "." ), system info[directory separator] );
		}


		if (system info[operating system] = Windows)
		{
			command[] = quote path(_zip path[]) + ' -y x ' + quote path(archive file name[])
				  + " -o" + quote path(target directory name[]) + ' -r > NUL';
		}
		else // Linux
		{
			command[] 	= _unzip path[]      + ' -qq -o ' + quote path(archive file name[])
				  + ' -d ' + quote path(target directory name[]);
		}


		rv[] = system(command[]);

		if (rv[] <> 0)
		{
			exception( stop, "unzip command failed: " + command[] + new line + "Check all file names.", 1 );
		}

		if (!directory existing( target directory name[]))
		    exception( stop, compose("Failed to extract the archive '", target directory name[], "': Possibly problems extracting."), 1 );

	}


	define procedure ( zip compress, {{ source path name, literal }, { archive file name, literal }, { archive type, literal}}, 1, 3 )
	{
		substitute all			( source path name[], "/", system info[directory separator] );
		substitute all			( source path name[], "\", system info[directory separator] );

		if ( ( find(source path name[], "*") == -1) & ( find(source path name[], "?") == -1) ) // No wildcard specified
		{
			if ( (!directory existing( source path name[])) & (!file existing( source path name[])) )
			    exception( stop, compose("1st parameter: Source Path Name = '", source path name[], "': Neither existing file or directory found"), 1 );
		}
		else
		{
			if (parameter count[]==1)
			    exception( stop, compose("1st paramter: Source Path Name = '", source path name[], "' contains wildcard symbols (* and/or %).", new line,
						"2nd parameter (archive file name) is required." ), 1);
		}


		if (parameter count[]>=2)
		{
		    substitute all		( archive file name[], "/", system info[directory separator] );
		    substitute all		( archive file name[], "\", system info[directory separator] );

		    if (directory existing( archive file name[]))
			exception( stop, compose("2nd parameter: archive file name = '", archive file name[], "': Exists as directory"), 1 );
		}
		else
		{
		    archive file name[] = right( left last match( source path name[], "." ), system info[directory separator] );
		}

		if (parameter count[]>=3)
		{
		    allowed archive types[] = select if ( system info[operating system] == Windows, 'zip,7z', zip ); // LINUX: zip only
		    if (archive type[] <> allowed archive types[])
			exception( stop, compose("3rd parameter: archive type = '", archive file name[], "': Allowed: " + allowed archive types[]), 1 );
		}
		else
		{
		    archive type[] = "zip";
		}

		if (archive file name[] <> '*.' + softquoted literal( archive type[] ) ) // Add .zip or .7s after archive file name if not specified
		{
		    archive file name[] += '.' + archive type[];   
		}


		if (system info[operating system] = Windows)
		{
		    command[] = quote path(_zip path[]) + ' -y a -t' + archive type[] + ' ' + quote path(archive file name[]) + ' ' 
		              + quote path(source path name[]) + ' -r > NUL';
		}
		else // Linux
		{
		    command[] = _zip path[] + ' -r -q ' + quote path(archive file name[]) + ' ' + quote path(source path name[]);
		}

		rv[] = system(command[]);
		if (rv[] <> 0)
		{
			exception( stop, "zip command failed: " + command[] + new line + "Check all file names.", 1 );
		}

		if (!file existing( archive file name[]))
		    exception( stop, compose("Failed to create the archive '", archive file name[]), 1 );

	}

}





