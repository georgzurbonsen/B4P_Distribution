#!./b4p -I

// B4P Installation Script for UNIX/LINUX systeems

// Revision History
//
// 1.0		11.01.2020	Created for Beyond4P 6.02 and 7.00 under LINUX
// 1.1		14.02.2020	Suports LINUX and MACOS
// 1.2		10.08.2020	Adaptation to B4P 8.00 / Rebranding

{
	echo(new line, "B4P installation for Linux and MacOS platform ...", new line);

	if (system info[operating system] <> Linux, MACOS)
	{
		throw( "Attempting to install B4P under "+ system info[operating system] + new line +
		       "    This installation packgage is for LINUX and MACOS systems only." );
	}


	slash[] 			= system info[directory separator]; // '\' for Windows, '/' for UNIX environments
	dir[installation image] 	= working directory() + slash[];
	principal b4p folder name[] 	= "b4p";

	user settings file[]		= "B4P User Settings.json";
	locale settings file[]		= "B4P Locale Settings.json";
	license file[]			= "B4P License File.json";
	identification file[]		= "B4P Identification File.json";

	table initialize( menu,
	{ 	{ Choices,	Explanations, 					Selections 	},
		{ M,		'Installation on local user machine',	 	M 		},
		{ U,		'Uninstall B4P', 				D 		},
		{ I,		'Get identification for generating a license',	I 		},
		{ E,		'Exit installer without actions',		E 		}  
	} );


	//
	// Check privileges
	//

	echo(new line, "1 >> Check the B4P privileges to run installation program ...", new line);

	if (system info[privileges] <> elevated,administrator) 
		throw( "Insufficient privileges." + new line + "    Use 'sudo ./setup.b4p' to install B4P on your system." );

	//
	// Identify installation target (Menu)
	//

	echo(new line, "2 >> Installation program - Main Menu ...", new line);

	choice[] = table menu quick( menu, Choices, Explanations, Selections );

	if (choice[] = E) exit;

	if (choice[] = D)
	{
	    reply[] = input quick ignore case(new line + "A t t e n t i o n" + new line + "Are you sure you want to uninstall B4P? ", NY );
	    if (reply[]<>Y) exit;
	}


	if (choice[] = I)
	{
		echo		(new line, "    Getting system identfication for license generation ..." );
		id[] 		= license provide identification();
		echo		(new line, "    Specify a personal name and/or company name as license holder name");
		holder[] 	= input(   "    Enter the name: ", literal );
		
		attribute write( ".", identification file[], Holder, holder[] );
		attribute write( ".", identification file[], Identification, id[] );
		attribute write( ".", identification file[], Timestamp, literal(date(now),"YYYY-MM-DD HH:II:SS") );
		system( "chown  " + system info[user name] + " " + quote path(identification file[]) );
		echo		(new line, "    The identification info is stored in this file: ", identification file[] );
		echo		("    --> Please send this .JSON file out by mail in order to receive the license key.");
		echo( new line, "Done", new line, new line );
		exit;
	
	}


	//
	// Check if all files needed for installation are available
	//

	echo(new line, "3 >> Check that all required files are available for installation ...", new line );

	if (choice[] <> D)
	{

		required files 2[Program]		= "b4p";
		required files 2[Manual]		= "B4P Reference Manual.b4p";
		required files 2[Install Script]	= "setup";
	
		required files 1[Locales List]	= "List of Locales.csv";
		required direct 1[lib]			= "lib";
		required direct 1[weblib]		= "weblib";


		for all variables( required direct 1[], direct[] )	// To copy to /usr/local/etc
		{
		    echo("    Check ", direct[] );
		    if (!directory existing ( dir[installation image] + direct[])) throw( "Following required file is missing: " + direct[] );
		}

		for all variables( required files 1[], file[] )	// To copy to /usr/local/etc
		{
		    echo("    Check ", file[] );
		    if (!file existing ( dir[installation image] + file[])) throw( "Following required file is missing: " + file[] );
		}
		for all variables( required files 2[], file[] )	
		{
		    echo("    Check ", file[] );
		    if (!file existing ( dir[installation image] + file[])) throw( "Following required file is missing: " + file[] );
		}
	}
	else : echo("Skipped.");


	//
	// Identify location of program files and check if folder is existing
	//

	echo(new line, "4 >> Identify locations for the program files ...", new line);

	dir[bin] 				= system info [ bin directory ];
	dir[program files b4p]			= system info [ program directory b4p ];
	dir[user application data]		= system info [ user app data directory b4p ];
	dir[license]				= dir[user application data];

	echo("Identified following directories:", new line);
	echo("    For executable program:                     ", dir[bin]);
	echo("    For program related files (e.g. libraries): ", dir[program files b4p]);
	echo("    For user application data:                  ", dir[user application data]);

	//
	// Check for existing user, locale and license settings.
	//

	if (choice[] <> D) // All choices except uninstallation
	{

	    user settings file name[]   	= dir[user application data] + slash[] + user settings file[];
	    user settings   existing[] 	= file existing( user settings file name[]   );

	    locale settings file name[] 	= dir[user application data] + slash[] + locale settings file[];
	    locale settings existing[] 	= file existing( locale settings file name[] );

	    license file name[]         	= dir[license] + slash[] + license file[];
	    license file existing[] 		= file existing( license file name[]         );


	    echo(new line, "    Found following settings files:", new line);
	    echo("    User   settings:   ", select if ( user settings existing[]  , user   settings file name[], "No." ));
	    echo("    Locale settings:   ", select if ( locale settings existing[], locale settings file name[], "No." ));
	    echo("    License file   :   ", select if ( license file existing[]   , license file name[]        , "No." ));


	    if (user settings existing[])
	    {
		echo(new line, "    The user settings file contains starting directory name.");
		echo(          "    user defined prompt, and other user specific data.", new line);
		reply[]	= input quick ignore case("    Do you want to keep the user settings from the previous installation ?", "NY");
		if (reply[]=N) 
		{
		    file delete( user settings file name[] );
		    user settings existing[] = false;
		}
	    }


	    if (locale settings existing[])
	    {
		echo(new line, "    The locale settings file contains language and country specific" );
		echo(          "    number and date formats.", new line);
		reply[] = input quick ignore case("    Do you want to keep the locale settings from the previous installation ?", "NY");
		if (reply[]=N) 
		{
		    file delete( locale settings file name[] );
		    locale settings existing[] = false;
		}
	    }

	    if (directory existing( dir[user application data] ))
		file copy multiple overwrite all(  dir[user application data], ".", "*.json" ); // Copy all settings file to local installation directory

	    if (license file existing[])
	    {
		attribute read( left last match( license file name[], slash[] ), license file[], Holder, license[Holder] );
		attribute read( left last match( license file name[], slash[] ), license file[], Key, license[Key] );
		echo(new line, "    The license file contains the authentication info to run B4P");
		echo(          "    with given license rights.  With few exceptions, the license file");
		echo(          "    continues to be valid for the next release.");
		echo(          "    License holder: ", license[Holder] );
		reply[] = input quick ignore case("    Do you want to keep the license file from the previous installation ?", "NY");
		if (reply[]=N) 
		{
		    license file existing[] = false;
		    delete(license[Key], license[Holder]);
		}
		else
		{
		    file copy multiple overwrite all( dir[license], ".", license file[] ); // Keep license file as new location may be different
		}
	    }

	}


	{
	    echo(new line, "5 >> Deleting B4P program and application data subdirectories (if existing) ...", new line);

	    for all parameters( { dir[program files b4p], dir[user application data] }, dir[] )
	    {
		if (directory existing( dir[] ))
		{
			directory delete recursive( dir[] );
			echo("    Deleted ", dir[] );
		}
	    }

	    file delete silently( dir[bin] + slash[] + "b4p" ); // Delete the executable file
	    echo("    Done.");
	}


	//
	// Identify paths to desktop and start menus
	//



	if (choice[] = D)
	{
		echo(new line, "UnInstallation completed.", new line);
		exit;
	}

	//
	// Create the new folder incl. libraries folder
	//

	echo(new line, "6 >> Create new folders for B4P program ...", new line);


	// create /etc/b4p and /etc/b4p/lib

	dir[Lib] = dir[program files b4p] + slash[] + "lib";
	rv[] = directory create silently( dir[Lib] );
	if (rv[] != "OK")
	{
	    throw("Attempting to create directory '" + dir[program files b4p] + "': " + rv[]);
	}
	echo("    Created ", dir[Lib], "." );


	// create /home/username/.config/b4p
	rv[] = directory create silently( dir[user application data] );
	if (rv[] != "OK")
	{
	    throw("Attempting to create directory '" + dir[user application data] + "': " + rv[]);
	}
	echo("    Created ", dir[user application data], "." );


	//
	// Copy the contents (Program, DLL file, libraries, etc.) 
	//

	echo(new line, "7 >> Copy all files to destination directory '", dir[program files b4p] , " ...", new line);

	for all variables( required files 1[], file[] )
	{
		echo("    Copying file ", file[], " ...");
		file copy(  dir[installation image] + file[], dir[program files b4p]  + slash[] + file[] );
		system( "chmod 755 " + quote path(dir[program files b4p]  + slash[] + file[]) ); // Enable access rights

	}

	for all variables( required direct 1[], direct[] )
	{
		echo("    Copying directory ", direct[], " ...");
		file copy recursive(  dir[installation image] + direct[], dir[program files b4p]  + slash[] + direct[] );
		system( "chmod 755 -R " + quote path(dir[program files b4p]  + slash[] + file[]) ); // Enable access rights
	}


	echo("   Copying ", required files 2[Program], " to ", dir[bin], " ...");
	file copy( dir[installation image] + slash[] + required files 2[Program], dir[bin] + slash[] + required files 2[Program] );
	system( "chmod 755 " + quote path(dir[bin] + slash[] + required files 2[Program]) ); // Enable access rights
//	system( "chown -R "  + system info[user name] + " " + quote path(dir[bin] + slash[] + required files 2[Program]) );

	//
	// Restore user settings and locale settings
	//

	echo(new line, "8 >> Restore user and locale settings (if available) ..." , new line);

	if ( file existing( user settings file[] )  )
	{
	    echo("    Found: ", user settings file[] );

	    file copy multiple overwrite all(  ".", dir[user application data], user settings file[] ); 
	    file delete ( user settings file[] );
	}
	else
	{
	    echo("    Info: User settings file not found. Skipped copying", new line);
	}


	if ( file existing( locale settings file[] )  )
	{
	    echo("    Found: ", locale settings file[] );

	    file copy multiple overwrite all(  ".", dir[user application data], locale settings file[] ); 
	    file delete ( locale settings file[] );
	}
	else
	{

	    echo("    Info: No locale settings have been defined yet.");
	    table load( loc, "List of Locales.csv" );
	    table keep columns( loc, {Locale, Language, Country } );
	    table delete blank rows( loc );
	    table insert columns( loc, Choice, "", 0);

	    table copy table( loc, loc1 );
	    table consolidate( loc1, Language );
	    table process( loc1, [Choice] = chr( row()+64 ) );
	    echo(new line,"    Step 1 - Choose language:");
	    lang[] = table menu quick( loc1, Choice, Language, Language );

	    table copy table( loc, loc1 );
	    table keep selected rows( loc1, [Language]=lang[] );
	    table process( loc1, [Choice] = chr( row()+64 ) );
	    echo(new line,"    Step 2 - Choose country:");
		    locale[] = table menu quick( loc1, Choice, Country, Locale );

	    echo("    Locale chosen: ", locale[] );	    
	    table delete ( loc, loc1 );

	    set locale( locale[], "List of Locales.csv" );
	    echo("    Done setting locale.");
	}

	system( "chown -R " + system info[user name] + " " + quote path(dir[user application data]) );

	//
	// Add B4P on the desktop - Skipped
	//


	//
	// Add Bd4P in the start menu - Skipped
	//


	//
	// Set the license info if existing
	//


	echo(new line, "9 >> Program Licensing ..." , new line);

	if (existing(license[Key]))
	{
		echo("    A license key is available or has been preserved from previous application");
		rv[] = license apply key( license[Key], license[Holder], choice[]==M );
		if (rv[]=="OK")
		{
			echo("    License key has been accepted.", new line, "    Holder: ", license[Holder]);
		}
		else:	throw("License not accepted - " + rv[]);
	}
	else: if (file existing(license file[]))
	{
		echo("    A license file is already provided in this installation package and will be used.");

		rv[] = directory create silently( license directory[] );
		if (rv[] <> 'OK','Directory already existing') throw("Installation aborted due to following error: " + rv[]);

		file copy multiple overwrite all( ".", license directory[], license file[] ); 
	}
	else // No license info taken over
	{
	    echo(new line, "License activation ...", new line );
	    echo("    Specify the license file (typically called 'B4P Licsense File.json'), or" );
	    echo("    press [Enter] to skip this and run B4P in demo mode with some restrictions." );

	    rv[] = '';
	    do
	    {
		license[path name] = input("    Enter path + file name or press [Enter] to skip" + new line + "    --> ", literal );
		if (license[path name]=='')
		{
		    echo("    Nothing entered.  B4P will be activated in demo mode.");
		    break loop;
		}

		if (!file existing( license[path name] ))
		{
		    echo(new line, "    Directory or file not found. Please retry." );
		    continue loop;
		}

		variable load( license[], license[path name] );

		rv[] = license apply key( license[Key], license[Holder], choice[]==M );
		if (rv[]=="OK")
		{
			echo("    License accepted.  Thank you.  Holder is ", license[Holder]);
		}
		else:	echo("    ", rv[], "  Please retry.");
	    }
	    while(rv[]<>"OK");
	}


	system( "chown -R " + system info[user name] + " " + quote path(dir[user application data]) );


	echo(new line, ">>  Congratulations! Installation has completed.", new line);



	my program directory[] = system info[user directory] + slash[] + principal b4p folder name[];

	// Final step: Make sure the own files are really owned by user and not the root

	echo;
	reply[] = input quick ignore case(new line + "    Do you want to create a personal B4P program folder ? ", NY );
	if (reply[] = Y)
	{
	    echo("    Creating directory: ", my program directory[] );
	    echo("    If directory or files already exist, then existing files");
	    echo("    will not be overwritten." );

	    rv[] 			= directory create silently( my program directory[] );
	    if 				(rv[] <> 'OK','Directory already existing') throw("Unable to create this directory: " + rv[]);
	    file copy multiple all	( ".", my program directory[], {main.b4p, hello World.b4p, start B4P here.b4p, interactive.b4p} );
	    file copy overwrite		( required files 2[Manual], my program directory[] + slash[] + required files 2[Manual] );
	    starting directory		( my program directory[] );

	    // Make sure all files are owend by user and nto the root.

	    system( "chmod -R 755 "                                + quote path(my program directory[]      + slash[]) );
	    system( "chown -R "     + system info[user name] + " " + quote path(dir[user application data]) );
	    system( "chown -R "     + system info[user name] + " " + quote path(my program directory[]) );

	    echo(new line, "    Done creating this directory.");
	    echo(          "    When you start B4P without file specified, 'Main.b4p' in this directory will be started.");
	}

	echo;
	echo(new line,  "    Highly advisable to restart your machine so all configuration settings for this installation are in effect.", new line, new line );


	catch( msg[] )
	{
		echo(new line, "*** An error occurred during the installation process ***", new line);
		echo("    Message: ", msg[] );
		echo("    Installation procedure will be stopped", new line, new line);
		exit;
	}

}
